package mwong.myprojects.fifteenpuzzle;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * PropertiesCache loads custom setting from property files. Custom setting stored in
 * resources/config.properties file.  Remote server properties generated by system
 * and stored in resources/remote.properties.
 *
 * @author <a href="http://www.linkedin.com/pub/macy-wong/46/550/37b/"
 *            target="_blank">Meisze Wong (linkedin)</a>
 * @see <a href="http://www.github.com/mwong510ca/15PuzzleOptimalSolver/"
 *         target="_blank">GitHub (full project)</a>
 */
public final class PropertiesCache {
  /** The configuration property file location. */
  private static final String CONFIG_PROP_FILE = "resources/config.properties";
  /** The remote property file location. */
  private static final String REMOTE_PROP_FILE = "resources/remote.properties";
  /** Instantiating Properties class with variable CONFIG_PROP. */
  private static final Properties CONFIG_PROP = new Properties();
  /** Instantiating Properties class with variable REMOTE_PROP. */
  private static final Properties REMOTE_PROP = new Properties();

  /**
   * Private constructor, initializes the PropertiesCache object.
   */
  private PropertiesCache() {
    try (FileInputStream in = new FileInputStream(CONFIG_PROP_FILE)) {
      CONFIG_PROP.load(in);
    } catch (IOException ex) {
      System.err.println("Unable to locate configuration files, restore to"
          + " system default settings");
    }
    try (FileInputStream in = new FileInputStream(REMOTE_PROP_FILE)) {
      REMOTE_PROP.load(in);
    } catch (IOException ex) {
      // do nothing
    }
  }

   /**
    * Inner Singleton class of PropertiesCache.
    * 
    * @author <a href="http://www.linkedin.com/pub/macy-wong/46/550/37b/"
    *            target="_blank">Meisze Wong (linkedin)</a>
    */
  private static class Singleton {
    /** Static variable INSTANCE of type Singleton. */
    private static final PropertiesCache INSTANCE = new PropertiesCache();
  }

  /**
   * Returns the instance object of PropertiesCache.
   *
   * <p>Factory method to provide the users with instances
   *
   * @return PropertiesCache the instance object
   */
  public static PropertiesCache getInstance() {
    return Singleton.INSTANCE;
  }

  /**
   * Returns the property value of the given key.
   *
   * @param key the String of properties key
   * @return String of property value if property key exists
   */
  public String getProperty(final String key) {
    return CONFIG_PROP.getProperty(key);
  }

  /**
   * Check if the given key exists in property set.
   *
   * @param key the String of properties key
   * @return boolean value represents if the given key exists
   */
  public boolean containsKey(final String key) {
    return CONFIG_PROP.containsKey(key);
  }

  /**
   * Returns the property value of the given key.
   *
   * @param key the String of properties key
   * @return String of property value if property key exists
   */
  public String getRemoteProperty(final String key) {
    return REMOTE_PROP.getProperty(key);
  }

  /**
   * Check if the given key exists.
   *
   * @param key the String of properties key
   * @return boolean value represents if the given key exists
   */
  public boolean containsRemoteKey(final String key) {
    return REMOTE_PROP.containsKey(key);
  }

  /**
   * Returns the file path of remote property.
   *
   * @return String of remote property file path
   * @see mwong.myprojects.fifteenpuzzle.server.PropertiesFileCreator
   */
  static String getRemotePropertyFile() {
    return REMOTE_PROP_FILE;
  }
}
